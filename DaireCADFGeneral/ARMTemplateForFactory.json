{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DaireCADFGeneral"
		},
		"ADLSampleData_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLSampleData'"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"DaireDataLakeStorageAccount_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DaireDataLakeStorageAccount'"
		},
		"DaireSHIRFolder_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'DaireSHIRFolder'"
		},
		"DataFlowDemoBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DataFlowDemoBlobStorage'"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"Xero1_connectionProperties_consumerKey": {
			"type": "secureString",
			"metadata": "Secure string for 'consumerKey' of 'Xero1'"
		},
		"Xero1_connectionProperties_privateKey": {
			"type": "secureString",
			"metadata": "Secure string for 'privateKey' of 'Xero1'"
		},
		"ADLSampleData_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dairedatalake.dfs.core.windows.net"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlmlbootcamprg.dfs.core.windows.net"
		},
		"DaireDataLakeStorageAccount_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dairedatalake.dfs.core.windows.net"
		},
		"DaireSHIRFolder_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\ADF SHIR Test\\In"
		},
		"DaireSHIRFolder_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "SPT\\DAireCunningham"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Temp\\BWG"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "SPT\\DaireCunningham"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DeltaLake_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeltaLake_DataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DeltaLake_DataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MovieDBCSV": {},
									"DeltaLakeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-28T17:41:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DeltaLake_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DownloadMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download Movie data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MoveDBCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesOnPrem",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-09-24T13:31:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoveDBCSV')]",
				"[concat(variables('factoryId'), '/datasets/MoviesOnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fail Pipeline Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FailOnPurpose",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Pipeline Fail",
							"errorCode": "123456"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-16T11:51:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/iNewsPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy iNews Test",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"detectDataType": false,
									"namespaces": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['nsml']['head']['storyid']"
										},
										"sink": {
											"name": "StoryID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['nsml']['fields']['string'][?(@.['@id']=='title')]['_value_']"
										},
										"sink": {
											"name": "Title",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['nsml']['fields']['string'][?(@.['@id']=='var-1')]['_value_']"
										},
										"sink": {
											"name": "PresenterName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['nsml']['fields']['duration'][?(@.['@id']=='total-time')]['_value_']"
										},
										"sink": {
											"name": "TotalTime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['nsml']['fields']['date'][?(@.['@id']=='air-date')]['_value_']"
										},
										"sink": {
											"name": "AirDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['nsml']['aeset']['ae'][0]['@type']"
										},
										"sink": {
											"name": "GenderCode",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "iNewsSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "iNewsDestination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-04T12:31:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/iNewsSource')]",
				"[concat(variables('factoryId'), '/datasets/iNewsDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/validationcheck_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "XMLFilesPresent",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "At least one file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(activity('GetFileNames').output.childItems), 0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "divide by zero",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorcheck",
										"value": {
											"value": "@div(1,0)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Divide by one",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorcheck",
										"value": {
											"value": "string(@div(1,1))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"errorcheck": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-21T11:29:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/XMLFilesPresent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BikeData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Chicago Divvy Bicycle.csv",
						"folderPath": "chicago-bike-data",
						"fileSystem": "adf-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "trip_id",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "month",
						"type": "String"
					},
					{
						"name": "week",
						"type": "String"
					},
					{
						"name": "day",
						"type": "String"
					},
					{
						"name": "hour",
						"type": "String"
					},
					{
						"name": "usertype",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "starttime",
						"type": "String"
					},
					{
						"name": "stoptime",
						"type": "String"
					},
					{
						"name": "tripduration",
						"type": "String"
					},
					{
						"name": "temperature",
						"type": "String"
					},
					{
						"name": "events",
						"type": "String"
					},
					{
						"name": "from_station_id",
						"type": "String"
					},
					{
						"name": "from_station_name",
						"type": "String"
					},
					{
						"name": "latitude_start",
						"type": "String"
					},
					{
						"name": "longitude_start",
						"type": "String"
					},
					{
						"name": "dpcapacity_start",
						"type": "String"
					},
					{
						"name": "to_station_id",
						"type": "String"
					},
					{
						"name": "to_station_name",
						"type": "String"
					},
					{
						"name": "latitude_end",
						"type": "String"
					},
					{
						"name": "longitude_end",
						"type": "String"
					},
					{
						"name": "dpcapacity_end",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CADOutput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataFlowDemoBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataFlowDemoBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetCAD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataFlowDemoBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Currency_CAD.txt",
						"container": "demo"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataFlowDemoBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetUSD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataFlowDemoBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Currency_USD.txt",
						"container": "demo"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataFlowDemoBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoveDBCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSampleData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesDB.csv",
						"folderPath": "MovieDB",
						"fileSystem": "demodata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSampleData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesOnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USDOutput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataFlowDemoBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataFlowDemoBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/XMLFilesPresent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DaireDataLakeStorageAccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "refined",
						"fileSystem": "rte"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DaireDataLakeStorageAccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Xml1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DaireDataLakeStorageAccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Sample iNews File.xml",
						"fileSystem": "dairedatalake"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DaireDataLakeStorageAccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/iNewsDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DaireDataLakeStorageAccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "iNewsExtract.csv",
						"fileSystem": "dairedatalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FieldName",
						"type": "String"
					},
					{
						"name": "Value",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DaireDataLakeStorageAccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/iNewsSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DaireDataLakeStorageAccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "new 1.xml",
						"fileSystem": "dairedatalake"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DaireDataLakeStorageAccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSampleData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSampleData_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLSampleData_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DaireDataLakeStorageAccount')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DaireDataLakeStorageAccount_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DaireDataLakeStorageAccount_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DaireSHIRFolder')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('DaireSHIRFolder_properties_typeProperties_host')]",
					"userId": "[parameters('DaireSHIRFolder_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('DaireSHIRFolder_password')]"
					}
				},
				"connectVia": {
					"referenceName": "DaireSelfHostedintegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/DaireSelfHostedintegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowDemoBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('DataFlowDemoBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "DaireSelfHostedintegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/DaireSelfHostedintegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Xero1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Xero",
				"typeProperties": {
					"connectionProperties": {
						"host": "asc",
						"authenticationType": "OAuth_1.0",
						"consumerKey": {
							"type": "SecureString",
							"value": "[parameters('Xero1_connectionProperties_consumerKey')]"
						},
						"privateKey": {
							"type": "SecureString",
							"value": "[parameters('Xero1_connectionProperties_privateKey')]"
						},
						"useEncryptedEndpoints": true,
						"useHostVerification": true,
						"usePeerVerification": true
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DaireSelfHostedintegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "North Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLiveInMinutes": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Currency Converter1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sample demo data flow to convert currencies",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CurrencyDatasetUSD1",
								"type": "DatasetReference"
							},
							"name": "USDCurrency"
						},
						{
							"dataset": {
								"referenceName": "CurrencyDatasetCAD1",
								"type": "DatasetReference"
							},
							"name": "CADSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "USDOutput1",
								"type": "DatasetReference"
							},
							"name": "USDSink"
						},
						{
							"dataset": {
								"referenceName": "CADOutput1",
								"type": "DatasetReference"
							},
							"name": "CADSink"
						}
					],
					"transformations": [
						{
							"name": "Union",
							"description": "The Union combines 2 streams together"
						},
						{
							"name": "NewCurrencyColumn",
							"description": "Create a new calculated column from currency rate"
						},
						{
							"name": "ConditionalSplit1",
							"description": "Split the data on state to create 2 streams"
						}
					],
					"script": "source(output(\n\t\tPreviousConversionRate as double,\n\t\tCountry as string,\n\t\tDateTime1 as string,\n\t\tCurrentConversionRate as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> USDCurrency\nsource(output(\n\t\tPreviousConversionRate as double,\n\t\tCountry as string,\n\t\tDateTime1 as string,\n\t\tCurrentConversionRate as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',\n\tCountry == 'CAD',\n\tdisjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> USDSink\nConditionalSplit1@CAD sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> CADSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CurrencyDatasetUSD1')]",
				"[concat(variables('factoryId'), '/datasets/CurrencyDatasetCAD1')]",
				"[concat(variables('factoryId'), '/datasets/USDOutput1')]",
				"[concat(variables('factoryId'), '/datasets/CADOutput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaLake_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoveDBCSV",
								"type": "DatasetReference"
							},
							"name": "MovieDBCSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DaireDataLakeStorageAccount",
								"type": "LinkedServiceReference"
							},
							"name": "DeltaLakeSink"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MovieDBCSV\nMovieDBCSV alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\tRottonTomatos as string\n\t),\n\tformat: 'delta',\n\tfileSystem: 'deltalake',\n\tfolderPath: 'DeltaLake1',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['movie'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating,\n\t\tRottonTomatos = {Rotton Tomato}\n\t)) ~> DeltaLakeSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoveDBCSV')]",
				"[concat(variables('factoryId'), '/linkedServices/DaireDataLakeStorageAccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaLake_DataFlow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DaireDataLakeStorageAccount",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "DaireDataLakeStorageAccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'deltalake',\n\tfolderPath: 'DeltaLake1') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'deltalake',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DaireDataLakeStorageAccount')]"
			]
		}
	]
}